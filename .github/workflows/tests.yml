name: Tests

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

jobs:
    integration:
        runs-on: ubuntu-latest

        # Service containers to run with `container-job`
        services:
            # Label used to access the service container
            postgres:
                # Docker Hub image
                image: postgres:13-alpine
                # Provide the password for postgres
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: syncv3
                ports:
                    # Maps tcp port 5432 on service container to the host
                    - 5432:5432
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - uses: actions/checkout@v2

            - name: Install Go
              uses: actions/setup-go@v2
              with:
                  go-version: 1.19

            - name: Build
              run: go build ./cmd/syncv3

            - name: Test
              run: go test -covermode=atomic -coverpkg ./... -p 1 $(go list ./... | grep -v tests-e2e) -coverprofile synccoverage.out
              env:
                  POSTGRES_HOST: localhost
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: postgres
                  POSTGRES_DB: syncv3
                  SYNCV3_DEBUG: "1"
                  SYNCV3_SECRET: itsasecret

            - name: Coverage
              run: go tool cover -func=synccoverage.out

            - name: Check /client works
              run: ./tests-e2e/client-check.sh
              env:
                  SYNCV3_DB: user=postgres dbname=syncv3 sslmode=disable password=postgres host=localhost
                  SYNCV3_SERVER: https://matrix-client.matrix.org
                  SYNCV3_SECRET: itsasecret
    end_to_end:
        runs-on: ubuntu-latest
        services:
            synapse:
                # Custom image built from https://github.com/matrix-org/synapse/tree/v1.72.0/docker/complement with a dummy /complement/ca set
                image: ghcr.io/matrix-org/synapse-service:v1.72.0
                env:
                    SYNAPSE_COMPLEMENT_DATABASE: sqlite
                    SERVER_NAME: synapse
                ports:
                    - 8008:8008
            # Label used to access the service container
            postgres:
                # Docker Hub image
                image: postgres:13-alpine
                # Provide the password for postgres
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: syncv3
                ports:
                    # Maps tcp port 5432 on service container to the host
                    - 5432:5432
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        steps:
            - uses: actions/checkout@v2
            - name: "Set Go Version"
              run: |
                  echo "$GOROOT_1_19_X64/bin" >> $GITHUB_PATH
                  echo "~/go/bin" >> $GITHUB_PATH
            - name: Build
              run: go build ./cmd/syncv3
            - name: Run end-to-end tests
              run: (cd tests-e2e && ./run-tests.sh .)
              env:
                  SYNCV3_DB: user=postgres dbname=syncv3 sslmode=disable password=postgres host=localhost
                  SYNCV3_SERVER: http://localhost:8008
                  SYNCV3_SECRET: itsasecret
    element_web:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: "Build docker image"
              env:
                DOCKER_BUILDKIT: 1
              run: docker build -f Dockerfile -t ghcr.io/matrix-org/sliding-sync:ci  .
            - uses: actions/checkout@v2
              with:
                repository: matrix-org/matrix-react-sdk
            - uses: actions/setup-node@v3
              with:
                cache: 'yarn'
            - name: Fetch layered build
              run: scripts/ci/layered.sh
            - name: Copy config
              run: cp element.io/develop/config.json config.json
              working-directory: ./element-web
            - name: Build
              env:
                CI_PACKAGE: true
              run: yarn build
              working-directory: ./element-web
            - name: "Run cypress tests"
              uses: cypress-io/github-action@v4.1.1
              with:
                browser: chrome
                start: npx serve -p 8080 ./element-web/webapp
                wait-on: 'http://localhost:8080'
                spec: cypress/e2e/sliding-sync/*.ts
              env:
                PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
                TMPDIR: ${{ runner.temp }}
                CYPRESS_SLIDING_SYNC_PROXY_TAG: 'ci'
